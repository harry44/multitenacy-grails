/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package it.myrent.ee.api.utils;

/**
 *
 * @author shivangani
 */
public class CartaDiCreditoUtils {

    private static final String PROP_DEBUG = "com.acmetech.cc.magstripe.debug";
    private static final String PROP_AUTO_TRACK2 = "com.acmetech.cc.magstripe.autoGenerateTrack2";
    /**
     * raw input string containing track 1, track 2 or track 1 &amp; 2 data.
     */
    String _InputStripeStr = null;
    /**
     * track 1 data string (parsed from input) including sentinel characters.
     */
    String _Track1Data = null;
    /**
     * track 2 data string (parsed from input) including sentinel characters.
     * @see #_AutoGenerateTrack2
     */
    String _Track2Data = null;
    /**
     * if set to true, parsing and debugging info written to System.out
     */
    static protected boolean _Debug = true;
    /**
     * set to true after input magnetic stripe string has been parsed.
     */
    public boolean _NeedsParsing = true;
    /**
     * true if track 1 data present
     */
    public boolean _HasTrack1 = false;
    /**
     * true if track 2 data present (note: track 2 is autmatically generated
     * if _AutoGenerateTrack2 is set to true -- default's to true)
     */
    public boolean _HasTrack2 = false;
    /**
     * If set to true (default) track2 data is automatically generated
     * if it was not supplied.
     */
    static public boolean _AutoGenerateTrack2 = true;
    /**
     * True if <b>Track 2</b> magnetic stripe data was auto-generated from the Track
     * 1 data.
     */
    boolean _Track2WasAutoGenerated = false;
    /**
     * Raw account name (something like &quot;Creditmeister/Steven P&quot;)
     */
    String _AccountHolder = null;
    /**
     * Account holder first name (plus possibly middle initial, title, etc)
     */
    String _NameFirst = null;
    /**
     * Account holder surname
     */
    String _NameLast = null;
    /**
     * Primary Account Number
     */
    String _PAN = null;
    /**
     * Expiration month (two digit)
     */
    String _ExpMonthStr = null;
    /**
     * Expiration year (four digit)
     */
    String _ExpYearStr = null;

    /**
     * Create a MagStripeCard using magnetic stripe data string
     * (tracks 1, 2 or both)
     * @param trackString track 1,2, or both data strings.
     * @throws MagstripeParseException
     */
    public CartaDiCreditoUtils(String trackString)
            throws MagstripeParseException {
        this._InputStripeStr = trackString;
        this._NeedsParsing = true;
        String p = System.getProperty(PROP_DEBUG, "false");
        if (p.equalsIgnoreCase("true")) {
            _Debug = true;
        }
        p = System.getProperty(PROP_AUTO_TRACK2, "true");
        if (!p.equalsIgnoreCase("true")) {
            _AutoGenerateTrack2 = false;
        }
        _parse();
    }

    /**
     * Determine if track 1 data is present.
     * @return boolean indicating whether track 1 data is present
     */
    public boolean hasTrack1() {
        return _HasTrack1;
    }

    /**
     * Determine if track 2 data is present.
     * @return boolean indicating whether track 2 data is present
     */
    public boolean hasTrack2() {
        return _HasTrack2;
    }

    /**
     * Get Track 1 magstripe string.
     * @return the Track 1 magnetic stripe data string or null if no Track 1 data exists.
     * @throws MagstripeParseException
     * @see #getTrack2()
     */
    public String getTrack1() {
        return _Track1Data;
    }

    /**
     * Get Track 2 magstripe string.
     * @return the Track 2 magnetic stripe data string or null if no Track 1 data exists
     * @see #getTrack1()
     */
    public String getTrack2() {
        return _Track2Data;
    }

    /**
     * Get the combined Track 1 &amp; 2 data string if both are available.
     * @return the magnetic track data string if both are available (possibly Track 2 was
     * auto-generated), or null if both are not available.
     * @see #getTrack1()
     * @see #getTrack2()
     */
    public String getTrackData() {
        if (_HasTrack1 && _HasTrack2) {
            return _Track1Data + _Track2Data;
        }
        return null;
    }

    /**
     * Determine whether the <b>Track 2</b> data string was auto-generated during parsing.
     * @return true if the Track 2 data was auto-generated.
     */
    public boolean getTrack2WasAutoGenerated() {
        return _Track2WasAutoGenerated;
    }

    /**
     * Get the raw account holder name (ex.: &quot;Spears/Brintney S&quot;).
     * @return The raw account holder name as parsed from Track 1 data or null if no Track 1 data.
     */
    public String getAccountName() {
        return _AccountHolder;
    }

    /**
     * Get account holder first name
     * @return account holder first name or null if no Track 1 data.
     */
    public String getFirstName() {
        return _NameFirst;
    }

    /**
     * Get account holder last name
     * @return account holder last name or null if no Track 1 data.
     */
    public String getLastName() {
        return _NameLast;
    }

    /**
     * Get primary account number (PAN field from Track 1 or Track 2 data)
     * @return PAN or null if account not found.
     */
    public String getAccountNumber() {
        return _PAN;
    }

    /**
     * Get expiration month from track 1 or track 2 data.
     * @return two-digit expiration month string.
     */
    public String getExpirationMonth() {
        return _ExpMonthStr;
    }

    /**
     * Get expiration year from track 1 or track 2 data.
     * @return four-digit expiration year string.
     */
    public String getExpirationYear() {
        return _ExpYearStr;
    }

    /**
     * parse the magstripe string. Called automatically as needed.
     * @throws MagstripeParseException
     */
    protected void _parse() throws MagstripeParseException {
        // TODO: funziona solamente con layout di tastiera italiana

        if (!this._NeedsParsing) {
            return;
        }
        try {
            //-- Example: Track 1 Data Only
            //-- %B1234123412341234^CardUser/John^030510100000019301000000877000000?
            //-- Key off of the presence of "^" but not "="

            //-- Example: Track 2 Data Only
            //-- ;1234123412341234=0305101193010877?
            //-- Key off of the presence of "=" but not "^"
            //--- Determine the presence of special characters
            int iHasTrack1 = _InputStripeStr.indexOf("&");
            int iHasTrack2 = _InputStripeStr.indexOf("=");


            if (iHasTrack1 > 0) {
                _HasTrack1 = true;
            }
            if (iHasTrack2 > 0) {
                _HasTrack2 = true;
            }
            if (_HasTrack1 && !_HasTrack2) {
                //-- set track 1 data
                if (_InputStripeStr.charAt(0) != '%') {
                    _InputStripeStr = "%" + _InputStripeStr;
                }
                if (_InputStripeStr.charAt(_InputStripeStr.length() - 1) != '?') {
                    _InputStripeStr += "?";
                }
                _Track1Data = _InputStripeStr;
            }

            //-- regenerate these indices
            iHasTrack1 = _InputStripeStr.indexOf("&");
            iHasTrack2 = _InputStripeStr.indexOf("=");

            if (_HasTrack1 && _HasTrack2) {
                //-- Split t1 and t2 strings into member fields
                int t2start = _InputStripeStr.indexOf("ò");
                if (t2start == -1) {
                    throw new MagstripeParseException("Cannot locate start of track2 data (;)");
                }
                _Track1Data = _InputStripeStr.substring(0, t2start);
                _Track2Data = _InputStripeStr.substring(t2start);

            //--
            //-- At this point we should parse t2 acct/exp. date and
            //-- verify it matches t1 values (TO DO)
            //--
            }

            String sAcctName = null;
            String sAcct = null;
            String sExpDate = null;
            if (_HasTrack1) {
                int iFS2 = _InputStripeStr.lastIndexOf("&");
                if (iFS2 == -1) {
                    throw new MagstripeParseException("Missing (2nd) field separator (^) in track 1 data");
                }
                sAcct = _InputStripeStr.substring(0, iHasTrack1);
                // look for starting sentinel and format code
                if (sAcct.charAt(0) == '%') {
                    if (!Character.isDigit(sAcct.charAt(1))) {
                        sAcct = sAcct.substring(2);
                    } else {
                        sAcct = sAcct.substring(1);
                    }
                }
                _PAN = sAcct;

                sAcctName = _InputStripeStr.substring(iHasTrack1 + 1, iFS2);
                _AccountHolder = sAcctName;
                int iNameDelim = sAcctName.indexOf(" ");
                if (iNameDelim == -1) {
                    throw new MagstripeParseException("Missing delimiter [/] in account holder name data");
                }
                _NameFirst = sAcctName.substring(0, iNameDelim);
                _NameLast = sAcctName.substring(iNameDelim + 1);

                //-- date format: YYMM
                sExpDate = _InputStripeStr.substring(iFS2 + 1, iFS2 + 5);
                _ExpYearStr = "20" + sExpDate.substring(0, 2);
                _ExpMonthStr = sExpDate.substring(2, 4);



                if (!_HasTrack2 && _AutoGenerateTrack2) {
                    // create pseudo track 2 data
                    _Track2Data = "ò" + sAcct + "=" + sExpDate + "111111111111?";
                    _HasTrack2 = _Track2WasAutoGenerated = true; //set flag now
                }
            }

            if (_HasTrack2) {
                // may have already parsed this info out if track 1 data present
                if (_PAN == null) {
                    //------------------------------------------
                    //--- Track 2 only cards
                    //--- Ex: 1234123412341234=0305101193010877?
                    //------------------------------------------
                    _Track2Data = _InputStripeStr;
                    //-- add sentinels if not there
                    if (_Track2Data.charAt(0) != ';') {
                        _Track2Data = "ò" + _Track2Data;
                    }
                    if (_Track2Data.charAt(_Track2Data.length() - 1) != '?') {
                        _Track2Data += "?";
                    }

                    int iSep = _Track2Data.indexOf("=");
                    if (iSep == -1) {
                        throw new MagstripeParseException("Invalid track 2 data string");
                    }
                    _PAN = _Track2Data.substring(0, iSep);
                    if (_PAN.charAt(0) == ';') {
                        _PAN = _PAN.substring(1);
                    }

                    _ExpYearStr = "20" + _Track2Data.substring(iSep + 1, iSep + 3);
                    _ExpMonthStr = _Track2Data.substring(iSep + 3, iSep + 5);
                }
            }
        } catch (ArrayIndexOutOfBoundsException oob) {
            throw new MagstripeParseException(oob.getMessage());
        } catch (NumberFormatException nfe) {
            throw new MagstripeParseException(nfe.getMessage());
        } catch (Exception exc) {
            throw new MagstripeParseException(exc.getMessage());
        }
        this._NeedsParsing = false;
    }

    /**
     * Determine if card account number passes checksum verification. (NOTE: this does not 
     * mean it is a valid account number, only that the checksum matches the check digit.)
     *<br /><br />
    <font size="-1"><i>Calculated using the Luhn formula for computing modulus 10  "double-add-double" check digit: Double the value of alternate (odd)  digits starting by the least significant (first right hand) digit.  Then add the individual digits of doubled (odd) numbers and even  digits of the original number. If the value ends in 0 then the check digit is 0. Otherwise subtract the value from the next higher number  ending in 0 (tens complement of the unit digit). The result is the  check digit. Example: If the account number without check digit is  1234 5678 9012 344 then (8) + 4 + (6) + 2 + (2) + 0 + (1 + 8) + 8 +  (1 + 4) + 6 + (1 + 0) + 4 + (6) + 2 + (2) = 65, therefore the check digit is 70 - 65 = 5 and so the complete account number is  1234 5678 9012 3445.
    </i></font>
     * @param cardAccountNumber the credit card account number 
     *(non-digit characters are ignored)
     * @return true if the checksum matches the check digit.
     * @throws java.lang.NullPointerException
     *
     */
     public static boolean validateChecksum(String cardAccountNumber)
            throws NullPointerException {
        cardAccountNumber = stripNonDigits(cardAccountNumber);
        if (cardAccountNumber == null) {
            throw new NullPointerException("Card number is null");
        }
        char[] inNumber = cardAccountNumber.toCharArray();
        int len = inNumber.length;
        int checksum, digit, temp, i;
        char lastChar = inNumber[len - 1];
        checksum = 0;
        for (i = 1; i < len; i++) {
            // don't include last digit
            digit = inNumber[len - i - 1] - '0';

            temp = digit * (1 + (i % 2));
            if (temp < 10) {
                checksum += temp;
            } else {
                checksum += temp - 9;
            }
        }
        checksum = (10 - (checksum % 10)) % 10;

        if ((lastChar - '0') == checksum) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Get the card type for a given credit card account number.
     * @param cardAccountNumber credit card number
     * @return type of credit card or &quot;Unknown&qout; if type can't be
     * determined.
     * @throws java.lang.NumberFormatException
     */
    public static String cardType(String cardAccountNumber)
            throws java.lang.NumberFormatException {
        String c = stripNonDigits(cardAccountNumber);
        if (c == null) {
            throw new java.lang.NumberFormatException("Null credit card number");
        }
        if (c.length() < 13) {
            throw new java.lang.NumberFormatException("Invalid credit card account number length (<13): " + c);
        }
        char firstdigit = c.charAt(0);
        if (firstdigit == '3' && c.charAt(1) == '7') {
            return "AMERICAN EXPRESS";
        } else if (firstdigit == '4') {
            return "VISA";
        //else if( firstdigit == '5' && c.charAt(1) == '6')	return "BankCard";
        } else if (firstdigit == '5' && c.charAt(1) == '6') {
            return "BANK CARD";
        } else if (firstdigit == '5') {
//            return "MasterCard";
            return "MASTERCARD";
        //else if( firstdigit == '3' )	return "Diner's Club";
        } else if (firstdigit == '3') {
            return "DINERS CLUB / CARTE BLANCHE";
        //else if( firstdigit == '6' )	return "Discover";
        } else if (firstdigit == '6') {
            return "DISCOVER CARD";
        } else {
            return "Unknown";
        }
    }

    /**
     * Strip out non-digit characters returning the raw credit card account number.
     *
     * @param s credit card account number
     * @return cleaned account number (with nothing but digits)
     */
    public static String stripNonDigits(String s) {
        if (s == null) {
            return s;
        }
        int len = s.length();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < len; i++) {
            if (Character.isDigit(s.charAt(i))) {
                sb.append(s.charAt(i));
            }
        }
        return sb.toString();
    }

    /* CLASSE PER LA GESTIONE DELLE ECCEZZIONI */

    /**
     *
     */

    public class MagstripeParseException extends Exception {

        /**
         * Default constructor.
         */
        public MagstripeParseException(String error) {
            super(error);
        }
    }
}
